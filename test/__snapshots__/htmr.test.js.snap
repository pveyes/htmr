// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attributes can handle css vendor prefixes 1`] = `
<i
  style={
    Object {
      "WebkitTextSizeAdjust": "100%",
      "msTextSizeAdjust": "100%",
    }
  }
>
  prefix
</i>
`;

exports[`attributes correctly convert multiple style values 1`] = `
<ul
  style={
    Object {
      "margin": "0 auto",
      "padding": "0 10px",
    }
  }
/>
`;

exports[`attributes correctly convert multiple style values 2`] = `
<span
  style={
    Object {
      "fontSize": 12,
    }
  }
/>
`;

exports[`attributes correctly convert multiple style values 3`] = `
<div
  style={
    Object {
      "backgroundImage": "url(https://d1nabgopwop1kh.cloudfront.net/xx)",
    }
  }
/>
`;

exports[`attributes correctly map HTML attributes to react props 1`] = `
<label
  className="input-text"
  htmlFor="name"
/>
`;

exports[`attributes correctly map HTML attributes to react props 2`] = `
<div
  aria-describedby="info"
  contentEditable="true"
  data-type="calendar"
  id="test"
  spellCheck="true"
/>
`;

exports[`attributes correctly map HTML attributes to react props 3`] = `
<link
  xlinkActuate="other"
  xmlLang="en"
/>
`;

exports[`attributes correctly map HTML attributes to react props 4`] = `
<svg
  colorInterpolationFilters="sRGB"
  fillRule="evenodd"
  viewBox="0 0 24 24"
>
  <path
    fill="#ffa0"
  />
</svg>
`;

exports[`attributes correctly map HTML attributes to react props 5`] = `
<img
  crossOrigin="true"
  srcSet="https://img.src"
/>
`;

exports[`attributes correctly map HTML attributes to react props 6`] = `
<iframe
  allowFullScreen={true}
  srcDoc="<p>html</p>"
/>
`;

exports[`attributes correctly map HTML attributes to react props 7`] = `
<input
  autoComplete="on"
  autoFocus={true}
  maxLength="10"
  readOnly={true}
/>
`;

exports[`attributes correctly map HTML attributes to react props 8`] = `
<button
  accessKey="s"
>
  Stress reliever
</button>
`;

exports[`attributes correctly map HTML attributes to react props 9`] = `
<time
  dateTime="2018-07-07"
>
  July 7
</time>
`;

exports[`attributes correctly map HTML attributes to react props 10`] = `
<img
  alt="alt"
  className=""
/>
`;

exports[`attributes decode HTML entities inside style declaration 1`] = `
<em
  style={
    Object {
      "fontFamily": "Consolas, \\"Liberation Mono \\"",
    }
  }
/>
`;

exports[`attributes handle CSS custom properties correctly 1`] = `
<div
  style={
    Object {
      "--color": "red",
    }
  }
>
  Explore Categories
</div>
`;

exports[`attributes handle CSS custom properties correctly 2`] = `
<div
  style={
    Object {
      "--color": "var(--syntax-text)",
    }
  }
>
  Explore Categories
</div>
`;

exports[`attributes ignore invalid style 1`] = `
<div
  style={Object {}}
>
  Explore Categories
</div>
`;

exports[`attributes ignore invalid style 2`] = `
<div
  style={
    Object {
      "color": "\\"red\\"",
    }
  }
>
  Explore Categories
</div>
`;

exports[`core can render element inside text node 1`] = `
Array [
  "what are ",
  <strong>
    you
  </strong>,
  " doing?",
]
`;

exports[`core can render self closing component 1`] = `
<img
  src="https://www.google.com/logo.png"
/>
`;

exports[`core can render self closing component 2`] = `<hr />`;

exports[`core can render self closing component 3`] = `<br />`;

exports[`core can render sibling element as multiple children 1`] = `
Array [
  <p>
    Multi
  </p>,
  <p>
    Component
  </p>,
]
`;

exports[`core ignore comment 1`] = `
<div>
  no comment
</div>
`;

exports[`core ignore multiline comment 1`] = `
<li>
  no multiline comment
</li>
`;

exports[`core it works 1`] = `
<p>
  This is cool
</p>
`;

exports[`encoding dangerously rendered script tag is not encoded 1`] = `
<script
  dangerouslySetInnerHTML={
    Object {
      "__html": "{
          \\"key\\": \\"value\\"
        }",
    }
  }
  data-cfasync="false"
  type="application/json"
/>
`;

exports[`encoding decode html attributes 1`] = `
<a
  href="https://www.google.com/?a=b&c=d"
>
  test
</a>
`;

exports[`encoding decode html entities on defaultMap 1`] = `
<p>
  & and &
</p>
`;

exports[`encoding unescape html entities 1`] = `
<blockquote
  className="entities"
>
  & and &
</blockquote>
`;

exports[`options dangerouslySetChildren dangerously render empty script tag 1`] = `
<script
  type="text/javascript"
/>
`;

exports[`options dangerouslySetChildren no dangerously render script tag 1`] = `
<script
  data-cfasync="false"
  type="text/javascript"
>
  
  var gtm4wp_datalayer_name = 'dataLayer';
  var dataLayer = dataLayer || [];
  dataLayer.push({
    pagePostType: 'post',
    pagePostType2: 'single-post',
    pageCategory: ['kalender-cuti'],
    pagePostAuthor: 'Candra Alif Irawan',
  });

</script>
`;

exports[`options dangerouslySetChildren preserve the content of style tag by default 1`] = `
<style
  dangerouslySetInnerHTML={
    Object {
      "__html": "ul > li {list-style: none}div[data-id=\\"test\\"]:not(.y) {display: none;}",
    }
  }
/>
`;

exports[`options dangerouslySetChildren should dangerously set html for required tags 1`] = `
<pre
  dangerouslySetInnerHTML={
    Object {
      "__html": "&lt;a href=&quot;/&quot;&gt;Test&lt;/a&gt;",
    }
  }
/>
`;

exports[`options preserveAttributes allow preserve some attributes 1`] = `
<div
  ng-if="x"
>
  
  
  <div
    tv-abc="d"
    tv-xxx="y"
  />
  

</div>
`;

exports[`options transform custom component 1`] = `
<section
  className="css-x243s"
  data-custom="true"
>
  <h2>
    Recommended
  </h2>
  Custom component
</section>
`;

exports[`options transform default mapping 1`] = `
<div>
  <div>
    <span>
      Default mapping
    </span>
  </div>
</div>
`;

exports[`whitespace allow newline only text node between elements 1`] = `
<pre>
  <span>
    Hello
  </span>
  

  <span>
    World
  </span>
</pre>
`;

exports[`whitespace allow whitespace only text nodes between elements 1`] = `
Array [
  <span>
    Hello
  </span>,
  " ",
  <span>
    World
  </span>,
]
`;

exports[`whitespace remove whitespace on table elements 1`] = `
<table>
  <tbody>
    <tr>
      <th>
        title
      </th>
    </tr>
    <tr>
      <td>
        entry
      </td>
    </tr>
  </tbody>
</table>
`;
